{
	"info": {
		"_postman_id": "71738981-55f0-4f16-89ca-96f2f66033ae",
		"name": "productiq",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25553200"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a valid JSON object\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains id, username, email, name, phone_number, job_title, company_or_institiution, and product_exp properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('phone_number');\r",
									"    pm.expect(jsonData).to.have.property('job_title');\r",
									"    pm.expect(jsonData).to.have.property('company_or_institiution');\r",
									"    pm.expect(jsonData).to.have.property('product_exp');\r",
									"});\r",
									"\r",
									"// Stores the user id in an environment or global variable\r",
									"var userId = pm.response.json().id;\r",
									"pm.globals.set(\"USERID\", userId);\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.phone_number).to.match(/^\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Job title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.job_title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job title should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Company or institiution name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.company_or_institiution).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the JSON body from the request\r",
									"var requestBody = pm.request.body;\r",
									"\r",
									"// Parse the JSON body\r",
									"var jsonData = JSON.parse(requestBody.raw);\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.globals.set(\"USERNAME\", jsonData.username);\r",
									"pm.globals.set(\"PASSWORD\", jsonData.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"www\",\r\n    \"email\": \"w@jhdefhwwkj.c1ncj\",\r\n    \"password\": \"1946\",\r\n    \"product_exp\":\"Beginner\",\r\n    \"name\": \"Swroop Dora\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/auth/register",
						"description": "This endpoint allows users to register for an account. Upon successful registration, the API returns the user's details in JSON format.\n\n### Request Body\n\n- `username` (text, required): The username of the user.\n- `email` (text, required): The email address of the user.\n- `password` (text, required): The password for the user's account.\n- `product_exp` (text, required): The user's experience with the product.\n- `name` (text, required): The name of the user.\n    \n\n### Response\n\n- Status: 201\n- Content-Type: application/json\n- `id`: The unique identifier for the registered user.\n- `username`: The username of the registered user.\n- `email`: The email address of the registered user.\n- `name`: The name of the registered user.\n- `phone_number`: The phone number of the registered user.\n- `job_title`: The job title of the registered user.\n- `company_or_institution`: The company or institution associated with the registered user.\n- `product_exp`: The experience with the product associated with the registered user."
					},
					"response": []
				},
				{
					"name": "signin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var json_data = pm.response.json()\r",
									"\r",
									"pm.globals.set(\"TOKEN\", json_data.token);\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.token).to.be.a('string');\r",
									"  pm.expect(responseData.token).to.match(/[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token expiration or validity\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.token).to.exist.and.to.be.a('string');\r",
									"    // Add additional checks for token expiration or validity if applicable\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{USERNAME}}\",\r\n    \"password\": \"{{PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/auth/login",
						"description": "\nThis endpoint is used to authenticate and log in a user. The HTTP POST request should be made to http://127.0.0.1:8000/api/v1/auth/login with a JSON payload in the raw request body type containing the username and password.\n\n### Request Body\n- username (string, required): The username of the user.\n- password (string, required): The password of the user.\n\n### Response\nUpon successful authentication, the server responds with a status code of 200 and a JSON object with a token attribute containing the authentication token.\n\nExample:\n```json\n{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\"\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Schema is valid\", function () {\r",
									"        var schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                id: { type: \"number\" },\r",
									"                username: { type: \"string\" },\r",
									"                email: { type: \"string\", format: \"email\" },\r",
									"                name: { type: \"string\" },\r",
									"                phone_number: { type: \"string\" },\r",
									"                job_title: { type: \"string\" },\r",
									"                company_or_institiution: { type: \"string\" },\r",
									"                product_exp: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"id\", \"username\", \"email\", \"name\", \"phone_number\", \"job_title\", \"company_or_institiution\", \"product_exp\"],\r",
									"        };\r",
									"\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is not valid\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id field should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Username field should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.username).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email field should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.email).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Id should be a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.id).to.be.a('number');\r",
									"  pm.expect(responseData.id).to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"// Stores the userId in an environment or global variable\r",
									"var userId = pm.response.json().id;\r",
									"pm.globals.set(\"USERID\", userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"swaroop340\",\r\n    \"email\": \"s@g.c349\",\r\n    \"password\": \"1946\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/auth/user",
						"description": "\nThis endpoint makes an HTTP GET request to retrieve user information for authentication. The request should include the username, email, and password in the payload.\n\n### Request\n- Method: GET\n- Endpoint: http://127.0.0.1:8000/api/v1/auth/user\n- Headers: N/A\n- Body:\n  - username (text, required): The username of the user.\n  - email (text, required): The email address of the user.\n  - password (text, required): The password of the user.\n\n### Response\nUpon successful execution, the endpoint returns a status code of 200 and the content type is in JSON format. The response body includes the user's ID, username, email, name, phone number, job title, company or institution, and product experience.\n\nSample Response:\n```json\n{\n    \"id\": 0,\n    \"username\": \"\",\n    \"email\": \"\",\n    \"name\": \"\",\n    \"phone_number\": \"\",\n    \"job_title\": \"\",\n    \"company_or_institution\": \"\",\n    \"product_exp\": \"\"\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property and is not empty\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is a valid JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"// Test to check if the response contains a Set-Cookie header\r",
									"pm.test(\"Valid Set-Cookie header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Set-Cookie')).to.be.true.and.to.include('session_id');\r",
									"});\r",
									"\r",
									"// Test to check if the session_id cookie is set to a valid value\r",
									"pm.test(\"session_id cookie is set to a valid value\", function() {\r",
									"    var session_id = pm.cookies.get('session_id');\r",
									"    pm.expect(session_id).to.exist.and.to.be.a('string').and.to.have.lengthOf(32);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo2LCJleHAiOjE3MTIwNTU4MjUsImlhdCI6MTcxMjA1NTc5NX0.OJklHQXFcg6EV2K7kyf6KDLcKDGVhuwN9J9X6czIeGo",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/auth/logout",
						"description": "### Auth Logout\n\nThis endpoint is used to log out the user from the application.\n\n**Response**\n\n- Status: 200\n- Content-Type: application/json\n- message (string): A message indicating the result of the logout action."
					},
					"response": []
				},
				{
					"name": "refresh token",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo2LCJleHAiOjE3MTIwNTU4MjUsImlhdCI6MTcxMjA1NTc5NX0.OJklHQXFcg6EV2K7kyf6KDLcKDGVhuwN9J9X6czIeGo",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"swaroop340\",\r\n    \"email\": \"s@g.c349\",\r\n    \"password\": \"1946\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/auth/refresh"
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a valid JSON object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id, username, email, name, phone_number, job_title, company_or_institiution, and product_exp properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.include.all.keys('id', 'username', 'email', 'name', 'phone_number', 'job_title', 'company_or_institiution', 'product_exp');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Rajesh Dora\",\r\n    \"phone_number\": \"9777777\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/user/update",
						"description": "\nThis endpoint allows you to update user information. The request should be sent as an HTTP POST to http://127.0.0.1:8000/api/v1/user/update.\n\n### Request Body\nThe request body should be in raw format and include the following parameters:\n- `name` (string, optional): The updated name of the user.\n- `phone_number` (string, optional): The updated phone number of the user.\n\n### Response\nUpon a successful update, the endpoint will return a status code of 200 and a JSON object with the updated user information, including:\n- `id` (number): The user's ID.\n- `username` (string): The username of the user.\n- `email` (string): The email address of the user.\n- `name` (string): The updated name of the user.\n- `phone_number` (string): The updated phone number of the user.\n- `job_title` (string): The job title of the user.\n- `company_or_institution` (string): The company or institution of the user.\n- `product_exp` (string): The product experience of the user.\n\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "App",
			"item": [
				{
					"name": "all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, app_name, and description\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (app) {\r",
									"        pm.expect(app).to.have.property('id');\r",
									"        pm.expect(app).to.have.property('app_name');\r",
									"        pm.expect(app).to.have.property('description');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(app) {\r",
									"    pm.expect(app.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"App name and description must be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(app) {\r",
									"        pm.expect(app.app_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"App name should not be empty\");\r",
									"        pm.expect(app.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each app object has a unique id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(app) {\r",
									"        pm.expect(app.id).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"App_name and description should not contain special characters or numbers\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"  responseData.forEach(function(app) {\r",
									"    pm.expect(app.app_name).to.match(/^[A-Za-z\\s]+$/, \"App_name should not contain special characters or numbers\");\r",
									"    pm.expect(app.description).to.match(/^[A-Za-z\\s]+$/, \"Description should not contain special characters or numbers\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://127.0.0.1:8000/api/v1/app/all",
						"description": "\nThis endpoint sends an HTTP GET request to retrieve all the available apps. The response will be in JSON format and will include an array of objects, where each object represents an app with its ID, name, and description.\n\nExample response:\n```json\n[\n    {\n        \"id\": 0,\n        \"app_name\": \"\",\n        \"description\": \"\"\n    }\n]\n```\n"
					},
					"response": []
				},
				{
					"name": "module",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields and correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(item.module_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Module name should not be empty\").and.to.match(/^[a-zA-Z0-9]+$/, \"Module name should be a non-empty string with only alphanumeric characters\");",
									"        pm.expect(item.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\").and.to.have.lengthOf.at.most(255, \"Description should not exceed 255 characters\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/1/module",
						"description": "This endpoint sends an HTTP GET request to retrieve information about the app with ID 1. The response will be in JSON format and will include the ID, module name, and description of the app. along ith complition and result. complition will tell how much is complited and result will be given for whole module if the molule is completed.\n\nThe response will have a status code of 200 indicating a successful request."
					},
					"response": []
				},
				{
					"name": "challenge and lebel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, challenge_name, description, and labels\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(item).to.have.property('challenge_name');\r",
									"        pm.expect(item).to.have.property('description');\r",
									"        pm.expect(item).to.have.property('labels').that.is.an('array').that.is.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Labels array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData[0].labels).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Challenge name should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.challenge_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Challenge name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that level_name in labels array is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.labels).to.be.an('array');\r",
									"        item.labels.forEach(function(label) {\r",
									"            pm.expect(label.level_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Description is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Level_name in labels array should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function (item) {\r",
									"        pm.expect(item.labels).to.be.an('array').that.is.not.empty;\r",
									"        \r",
									"        item.labels.forEach(function (label) {\r",
									"            pm.expect(label.level_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"url": "http://127.0.0.1:8000/api/v1/app/1/module/5",
						"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a specific module in an app. The response will contain the ID, challenge name, description, and labels associated with the module. The response will be in JSON format with a status code of 200.\n"
					},
					"response": []
				},
				{
					"name": "response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now object should exist in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.now).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Previous object exists and is an object\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.previous).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous 'answer' fields should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.now.answer).to.be.empty;\r",
									"    pm.expect(responseData.previous.answer).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Now and previous 'result' fields should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.now.result).to.be.empty;\r",
									"    pm.expect(responseData.previous.result).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous objects should have evalution_result property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.now.evalution_result).to.exist;\r",
									"    pm.expect(responseData.previous.evalution_result).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous 'result' object should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.now.result).to.be.an('object').that.is.empty;\r",
									"    pm.expect(responseData.previous.result).to.be.an('object').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now answer field should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.now.answer).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Now evalution_result field should be a number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.now.evalution_result).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"answer\": \"hii\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/response/lebel/1",
						"description": "\nThis API endpoint is a POST request to http://127.0.0.1:8000/api/v1/app/response/lebel/1. It is used to submit an answer for evaluation.\n\n### Request Body\n- The request body should be in raw format and include a JSON object with the \"answer\" key.\n\n### Response\nUpon successful execution, the API returns a status code of 200 and a JSON object with the following structure:\n```json\n{\n    \"now\": {\n        \"answer\": \"\",\n        \"result\": {},\n        \"evalution_result\": 0\n    },\n    \"previous\": {\n        \"answer\": \"\",\n        \"result\": {},\n        \"evalution_result\": 0\n    }\n}\n```\nThe \"now\" and \"previous\" objects contain the submitted answer, evaluation result, and additional information.\n\n"
					},
					"response": []
				},
				{
					"name": "categorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields and correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(item.module_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Module name should not be empty\").and.to.match(/^[a-zA-Z0-9]+$/, \"Module name should be a non-empty string with only alphanumeric characters\");",
									"        pm.expect(item.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\").and.to.have.lengthOf.at.most(255, \"Description should not exceed 255 characters\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/1/categorie",
						"description": "This endpoint sends an HTTP GET request to retrieve information about the app with ID 1. The response will be in JSON format and will include the ID, module name, and description of the app. along ith complition and result. complition will tell how much is complited and result will be given for whole module if the molule is completed.\n\nThe response will have a status code of 200 indicating a successful request."
					},
					"response": []
				},
				{
					"name": "skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields and correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(item.module_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Module name should not be empty\").and.to.match(/^[a-zA-Z0-9]+$/, \"Module name should be a non-empty string with only alphanumeric characters\");",
									"        pm.expect(item.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\").and.to.have.lengthOf.at.most(255, \"Description should not exceed 255 characters\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/2/categorie/1",
						"description": "This endpoint sends an HTTP GET request to retrieve information about the app with ID 1. The response will be in JSON format and will include the ID, module name, and description of the app. along ith complition and result. complition will tell how much is complited and result will be given for whole module if the molule is completed.\n\nThe response will have a status code of 200 indicating a successful request."
					},
					"response": []
				},
				{
					"name": "skill responce",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now object should exist in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.now).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Previous object exists and is an object\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.previous).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous 'answer' fields should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.now.answer).to.be.empty;\r",
									"    pm.expect(responseData.previous.answer).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Now and previous 'result' fields should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.now.result).to.be.empty;\r",
									"    pm.expect(responseData.previous.result).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous objects should have evalution_result property\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.now.evalution_result).to.exist;\r",
									"    pm.expect(responseData.previous.evalution_result).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now and previous 'result' object should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.now.result).to.be.an('object').that.is.empty;\r",
									"    pm.expect(responseData.previous.result).to.be.an('object').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Now answer field should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.now.answer).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Now evalution_result field should be a number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.now.evalution_result).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"answer\": {\r\n            \"Jobs to be done\": \"ans 1\",\r\n            \"Describe your Persona\": \"ans2\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/response/skill/1",
						"description": "\nThis API endpoint is a POST request to http://127.0.0.1:8000/api/v1/app/response/lebel/1. It is used to submit an answer for evaluation.\n\n### Request Body\n- The request body should be in raw format and include a JSON object with the \"answer\" key.\n\n### Response\nUpon successful execution, the API returns a status code of 200 and a JSON object with the following structure:\n```json\n{\n    \"now\": {\n        \"answer\": \"\",\n        \"result\": {},\n        \"evalution_result\": 0\n    },\n    \"previous\": {\n        \"answer\": \"\",\n        \"result\": {},\n        \"evalution_result\": 0\n    }\n}\n```\nThe \"now\" and \"previous\" objects contain the submitted answer, evaluation result, and additional information.\n\n"
					},
					"response": []
				},
				{
					"name": "section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields and correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(item.module_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Module name should not be empty\").and.to.match(/^[a-zA-Z0-9]+$/, \"Module name should be a non-empty string with only alphanumeric characters\");",
									"        pm.expect(item.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\").and.to.have.lengthOf.at.most(255, \"Description should not exceed 255 characters\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/3/section/topics",
						"description": "This endpoint sends an HTTP GET request to retrieve information about the app with ID 1. The response will be in JSON format and will include the ID, module name, and description of the app. along ith complition and result. complition will tell how much is complited and result will be given for whole module if the molule is completed.\n\nThe response will have a status code of 200 indicating a successful request."
					},
					"response": []
				},
				{
					"name": "lession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Each object in the response array has all the required fields and correct data types\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(item.module_name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Module name should not be empty\").and.to.match(/^[a-zA-Z0-9]+$/, \"Module name should be a non-empty string with only alphanumeric characters\");",
									"        pm.expect(item.description).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\").and.to.have.lengthOf.at.most(255, \"Description should not exceed 255 characters\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://127.0.0.1:8000/api/v1/auth/refresh\", function (err, response) {\r",
									"    var json_data = response.json()\r",
									"    console.log(json_data);\r",
									"\r",
									"    pm.globals.set(\"TOKEN\", json_data.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://127.0.0.1:8000/api/v1/app/3/section/topics/1/lessions",
						"description": "This endpoint sends an HTTP GET request to retrieve information about the app with ID 1. The response will be in JSON format and will include the ID, module name, and description of the app. along ith complition and result. complition will tell how much is complited and result will be given for whole module if the molule is completed.\n\nThe response will have a status code of 200 indicating a successful request."
					},
					"response": []
				}
			]
		},
		{
			"name": "subscription",
			"item": [
				{
					"name": "plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body array should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Plans array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, price\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(plan) {\r",
									"        pm.expect(plan).to.have.property('id');\r",
									"        pm.expect(plan).to.have.property('name');\r",
									"        pm.expect(plan).to.have.property('price');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not null or undefined\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.not.be.null.and.to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Presence and format of pagination metadata\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').that.is.empty; // Check if response is an empty array\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://127.0.0.1:8000/api/v1/subscription/plans",
						"description": "This endpoint makes an HTTP GET request to retrieve a list of subscription plans. The response will be in JSON format with a status code of 200. An example response would be \"\\[{name: 999 plan\n\ntype: monthly\n\nprice_monthly: 99\n\nprice_annual: 999\n\ndescription: best plan\n\nrecommended: true}\\]\"."
					},
					"response": []
				}
			]
		}
	]
}